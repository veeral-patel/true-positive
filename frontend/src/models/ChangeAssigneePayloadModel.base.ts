/* This is a mst-gql generated file, don't modify it manually */
/* eslint-disable */
/* tslint:disable */

import { types } from "mobx-state-tree"
import { MSTGQLObject, MSTGQLRef, QueryBuilder } from "mst-gql"
import { CaseModel } from "./CaseModel"
import { CaseModelSelector } from "./CaseModel.base"
import { TaskModel } from "./TaskModel"
import { TaskModelSelector } from "./TaskModel.base"
import { RootStoreType } from "./index"


/**
 * ChangeAssigneePayloadBase
 * auto generated base class for the model ChangeAssigneePayloadModel.
 *
 * Autogenerated return type of ChangeAssignee
 */
export const ChangeAssigneePayloadModelBase = MSTGQLObject
  .named('ChangeAssigneePayload')
  .props({
    __typename: types.optional(types.literal("ChangeAssigneePayload"), "ChangeAssigneePayload"),
    /** The updated case. Is null is you're not assigning a case. */
    case: types.maybeNull(MSTGQLRef(types.late(() => CaseModel))),
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: types.maybeNull(types.string),
    /** The updated task. Is null if you're not assigning a task. */
    task: types.maybeNull(MSTGQLRef(types.late(() => TaskModel))),
  })
  .views(self => ({
    get store() {
      return self.__getStore<RootStoreType>()
    }
  }))

export class ChangeAssigneePayloadModelSelector extends QueryBuilder {
  get clientMutationId() { return this.__attr(`clientMutationId`) }
  case(builder?: string | CaseModelSelector | ((selector: CaseModelSelector) => CaseModelSelector)) { return this.__child(`case`, CaseModelSelector, builder) }
  task(builder?: string | TaskModelSelector | ((selector: TaskModelSelector) => TaskModelSelector)) { return this.__child(`task`, TaskModelSelector, builder) }
}
export function selectFromChangeAssigneePayload() {
  return new ChangeAssigneePayloadModelSelector()
}

export const changeAssigneePayloadModelPrimitives = selectFromChangeAssigneePayload().clientMutationId
